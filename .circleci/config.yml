version: 2.1
workflows:
  version: 2.1
  build_and_test: #workflow名
    jobs:
      - build
      - test:
          requires:
            - build  
      - formatCheck:
          requires:
            - build  
      - stepCount:
          requires:
            - build  
      - releaseStaging:
          requires:
            - test
            - formatCheck
jobs:
  build:
    docker:
      - image: circleci/node:8.11.3
    steps:
      - restore_cache:
          keys:
            - source-v1-{{ .Branch }}-{{ .Revision }}
            - source-v1-{{ .Branch }}-
            - source-v1-
      - checkout
      - save_cache:
          key: source-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - .git
      - restore_cache:
          key: v1-npm-deps-{{ checksum "yarn.lock" }}
      - run: yarn
      - save_cache:
          key: v1-npm-deps-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: . # workspaceのrootパス（絶対パスかworking_directoryからの相対パス）
          paths:
            - . # 共有するパス（絶対パスかrootからの相対パス）
  test:
    docker: # See https://docs.docker.com/get-started/#docker-concepts if you are new to Docker.
      - image: circleci/openjdk:8u181-jdk-node-browsers-legacy
    steps:
      - attach_workspace: # workspaceをアタッチする
          at: .
      - run: sudo chmod +x ./gradlew
      - run: ./gradlew test
  formatCheck:
    docker:
      - image: circleci/node:8.11.3
    steps:
      - attach_workspace: # workspaceをアタッチする
          at: .
      - run: sudo chmod +x node_modules/.bin/eslint
      - run:
          name: lint
          command: |
            mkdir -p /tmp/test-reports/eslint
            node_modules/.bin/eslint . --format junit --output-file /tmp/test-reports/eslint/results.xml
      - store_test_results:
          path: /tmp/test-reports
      - store_artifacts:
          path: /tmp/test-reports
  stepCount:
    docker:
      - image: circleci/node:8.11.3
    steps:
      - attach_workspace: # workspaceをアタッチする
          at: .
      - run: yarn
      - run: sudo chmod +x node_modules/.bin/cloc
      - run:
          name: cloc
          command: |
            # 差分比較元のコミットハッシュ
            BASE_COMMIT= git show-branch --sha1-name master | tail -1 | awk '{print substr($0, index($0, "[") +1, index($0, "]") -2)}'
            # 収集対象言語
            LANGS='["Java","JavaScript"]'

            # リポジトリから一時フォルダへclone
            git clone $CIRCLE_REPOSITORY_URL ./_work
            cd _work

            # 生
            sh node_modules/.bin/cloc --json --diff $BASE_COMMIT HEAD

            # clocでステップ数を取得
            step_total=`sh node_modules/.bin/cloc --vcs=git --json`
            step_diff=`sh node_modules/.bin/cloc --json --diff $BASE_COMMIT HEAD`

            # 一時フォルダの削除
            cd ..
            rm -rf ./_work

            # 全体のステップ数（ロジック、コメント）
            logic_total=`echo $step_total | jq '[ .'$LANGS'.code ] | add'`
            comment_total=`echo $step_total | jq '[ .'$LANGS'.comment,.'$LANGS'.blank ] | add'`

            # 追加・修正分のステップ数（ロジック、コメント）
            logic_added=`echo $step_diff | jq '.added | [ .'$LANGS'.code ] | add'`
            logic_modified=`echo $step_diff | jq '.modified | [ .'$LANGS'.code ] | add'`
            comment_added=`echo $step_diff | jq '.added | [ .'$LANGS'.comment,.'$LANGS'.blank ] | add'`
            comment_modified=`echo $step_diff | jq '.modified | [ .'$LANGS'.comment,.'$LANGS'.blank ] | add'`

            # 流用分を算出
            logic_same=$((logic_total-logic_added-logic_modified))
            comment_same=$((comment_total-comment_added-comment_modified))

            # 出力
            {
              echo "■ロジックのみ"
              echo "・追加："$logic_added
              echo "・修正："$logic_modified
              echo "・流用："$logic_same
              echo "---"
              echo "・計　："$logic_total
              echo ""
              echo "■コメント・空行を含む"
              echo "・追加："$((logic_added+comment_added))
              echo "・修正："$((logic_modified+comment_modified))
              echo "・流用："$((logic_same+comment_same))
              echo "---"
              echo "・計　："$((logic_total+comment_total))
            }>./step-result.txt
  releaseStaging:
    docker: # See https://docs.docker.com/get-started/#docker-concepts if you are new to Docker.
      - image: circleci/openjdk:8u181-jdk-node-browsers-legacy
    steps:
      - attach_workspace: # workspaceをアタッチする
          at: .
      - run: mkdir /tmp/jarFile;
      - run: sudo chmod +x ./gradlew
      - run: ./gradlew build 
      - run: cp ./build/libs/circleCITest-0.0.1-SNAPSHOT.jar /tmp/jarFile/circleCItest.jar;

      - store_artifacts:
          path: /tmp/jarFile/circleCITest.jar;
          destination: artifact-file

      - store_artifacts:
          path: /tmp/jarFile